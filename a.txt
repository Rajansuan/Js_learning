What is git?
Free source Version Control System

What is version control system?
- A system that keeps track of our files or projects
- It allows you to revert selected files to a previous state, comapre the changes, checks who made the changes
- It helps when multiple peoples are working on the same code

2 types of VCS
a. Centralized Version Control
b. Distributed Version Control

In distributed version control people have a project on thier pc's with a history, a complete copy, keep pushing into the local repo and then network needed when pushing
Ex - git

What is Git?
Github is a web based hosting service for git repositories.
Note - You can use Git without Github, but you cannot use the Github without Git.

Git is nothing but a local repository to main different versions of your project
Github is public web hosting service and is used for hosting git repossitories

Local repository - Working copy private workplace

Working Directory and Staging Area or Index - An intermediate area where commits can be formatted and reviewed before completing the commits

Push - Send a change to another repository
Pull - Grab a change from a repository

Basic Workflow of Git - 

Step 1 - You modify a file from the working Directory
Step 2 - You add these files to the staging area
Step 3 - You perform commit operation that moves the files from the staging area. After push operation, it stores the changes permanently to the Git repository

Repository is a central storage location for managing and tracking changes in files and directories

Concepts of Git - 
1. Blob - Blob stands for Binary Large Object. Each version of a file is represented by blob. A blob holds the file data but does not contain any metadata about the file. It is a binary file and in Git database, it is named as SHA1 hash of that file. In Git, files are not addressed by names, everything is content addressed.

2. Trees - Tree is an object, which represents a directory, it holds blobs as well as other sub diretories. A tree is a binary file that stores references to blobs and trees which are also named as SHA1 hash of that object. Basically trees are used for associations 
(Hashing is the process of transforming any given key or a string of characters into another value)

 In Git, every commit you make is assigned a unique SHA-1 hash (Secure Hash Algorithm 1) value. This hash value is like a fingerprint for each commit. It helps Git keep track of every change made in the repository. Remember, hash values in Git are crucial for maintaining the integrity of your projects.

<Commits>
- Commits holds the current status of the repo. A commit is also named by SHA1 hash.
- Every commit object has a pointer to the parent commit object (think it has a linked list)

Git commands - 
1. Clone - Bring a repo hosted somewhere like github into a folder or your local machine
2. Add - Track your files and changes it Git, basically adds them to the staging area
3. Commit - Save your files in git
4. Push - Upload your commits to a git repo
5. Pull - Download changes from a remote repo to your local repo

What do different colors represent in github commit history
1. Green - Represents whats new have been added to the file
2. Red - Represents what have been removed from the file

Steps to initialise the git on your system
1. Install the git software
2. In terminal of your working directory write - git init
3. Checks for git status
4. then add the files to staging area - git add ,
5. Commit the files to the local repo - git commit -m "local commit"
Now these files are in the local repo, these are not yet present in our github repo
Now, check if the remote github repo is initialised or not - git remote -v
So, now we will add the remote repo to our local repo - git remote add origin pasteTheLink.git
6. Now add the remote repo - git remote add origin https://github.com/Rajansuan/Js_learning.git
7. git push origin master
8. Difference between initialising and cloning the repos, when you are cloning the repo, you are also cloning the working history, configurations of that repo
9. git clone https://github.com/Rajansuan/Js_learning.git
10. git pull origin master - to pull from the repo (latest changes) 

Add SSH key in github for authorization in MAC

When working on big project, working on main branch is risky and also different people works on different features so it is better that people work on different branches and pushes the code to main branch when the feature is completely ready.

Practical use case of branching - 
Imagine working on a main branch and then created a seperate branch for new feature then issue arises in main branch then we will create the new branch and fix the changes of main branch there and then merge it back with main branch after that we can merge the feature branch when the feature is completed

Note - We can we have the merge conflict

Steps to create a new branch
1. Check for what branch we are at - git branch 
2. Create a new branch -> git checkout -b feature_branchname
3. Now we can check the difference between the two branches -> git diff name_of_the_branch_to_compare_with

Note- In Git, the term "upstream" refers to the main branch from which a given branch was branched off of and to which it may eventually push changes to. By default, Git uses "origin" as the remote name for the upstream repository, but you can configure this to any name.

How to merge the branches?
1. First commit the changes the feature branch
2. Pull request also helps to merge our changes from one branch to another
3. We can merge using the UI (create the pull request from feature_branch to master), review and merge
4. Then git checkout master
5. git pull origin master (to get the latest data from online repo)

What is Git Merge Conflict?
A git merge conflict is an event that takes place when Git is unable to automatically resolve differences in code between two commits
So, you need to manually resolve and have to choose from which file you want to go ahead

Git commands to resolve conflicts
1. git log --merge: give us the list of commits that are causing the conflict
2. git diff: Identify the differences between the states repos or files
3. git checkout: Used to undo the changes made to the file or for changing the branches
4. git reset --mixed: used to undo changes to the working directory and staging area
5. git merge --abort: Helps in exiting the merge process and returning back to the state before the merging began
6. git reset: Used at the time of merge conflict to reset the conflicted files to their original state.

How to delete the unwanted branch when the work is over?
git branch -d feature_branch
but first have to go the another branch to do this process


